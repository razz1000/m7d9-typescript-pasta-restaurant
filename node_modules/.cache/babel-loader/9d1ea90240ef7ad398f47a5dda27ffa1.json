{"ast":null,"code":"var _jsxFileName = \"/Users/rasmus/Documents/Github/StriveSchool/m7d9-typescript-pasta-restaurant/src/components/Reservations.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Alert from 'react-bootstrap/Alert';\nimport { parseISO, format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Reservations = () => {\n  _s();\n\n  const [reservations, setReservations] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    fetchReservations();\n  }, []);\n\n  const fetchReservations = async () => {\n    try {\n      let response = await fetch('https://striveschool-api.herokuapp.com/api/reservation');\n\n      if (response.ok) {\n        let data = await response.json();\n        setReservations(data);\n        setIsLoading(false);\n      } else {\n        setIsLoading(false);\n        setIsError(true);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-4\",\n      children: \"BOOKED TABLES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      variant: \"info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this), isError ? /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: \"Something went wrong :(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ListGroup, {\n      className: \"mb-5\",\n      children: reservations.map(res => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        children: [res.name, \" for \", res.numberOfPeople, \" on\", ' ', format(parseISO(res.dateTime), 'EEEE, MMM. do - HH:mm')]\n      }, res._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Reservations, \"Fh1S27LtBde2rCaQfteL8Tfd1xw=\");\n\n_c = Reservations;\nexport default Reservations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reservations\");","map":{"version":3,"sources":["/Users/rasmus/Documents/Github/StriveSchool/m7d9-typescript-pasta-restaurant/src/components/Reservations.tsx"],"names":["useState","useEffect","ListGroup","Spinner","Alert","parseISO","format","Reservations","reservations","setReservations","isLoading","setIsLoading","isError","setIsError","fetchReservations","response","fetch","ok","data","json","error","map","res","name","numberOfPeople","dateTime","_id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,UAAjC;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CACxB,wDADwB,CAA1B;;AAIA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,YAAIC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAjB;AACAV,QAAAA,eAAe,CAACS,IAAD,CAAf;AACAP,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAJD,MAIO;AACLA,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,KAbD,CAaE,OAAOO,KAAP,EAAc;AACdT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GAlBD;;AAoBA,sBACE;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,SAAS,iBAAI,QAAC,OAAD;AAAS,MAAA,SAAS,EAAC,QAAnB;AAA4B,MAAA,OAAO,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,YAFhB,EAGGE,OAAO,gBACN,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,MAArB;AAAA,gBACGJ,YAAY,CAACa,GAAb,CAAkBC,GAAD,iBAChB,QAAC,SAAD,CAAW,IAAX;AAAA,mBACGA,GAAG,CAACC,IADP,WACkBD,GAAG,CAACE,cADtB,SACyC,GADzC,EAEGlB,MAAM,CAACD,QAAQ,CAACiB,GAAG,CAACG,QAAL,CAAT,EAAyB,uBAAzB,CAFT;AAAA,SAAqBH,GAAG,CAACI,GAAzB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA,kBADF;AAkBD,CA/CD;;GAAMnB,Y;;KAAAA,Y;AAiDN,eAAeA,YAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport { parseISO, format } from 'date-fns'\r\n\r\nconst Reservations = () => {\r\n  const [reservations, setReservations] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [isError, setIsError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    fetchReservations()\r\n  }, [])\r\n\r\n  const fetchReservations = async () => {\r\n    try {\r\n      let response = await fetch(\r\n        'https://striveschool-api.herokuapp.com/api/reservation'\r\n      )\r\n\r\n      if (response.ok) {\r\n        let data = await response.json()\r\n        setReservations(data)\r\n        setIsLoading(false)\r\n      } else {\r\n        setIsLoading(false)\r\n        setIsError(true)\r\n      }\r\n    } catch (error) {\r\n      setIsLoading(false)\r\n      setIsError(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2 className='mt-4'>BOOKED TABLES</h2>\r\n      {isLoading && <Spinner animation='border' variant='info' />}\r\n      {isError ? (\r\n        <Alert variant='danger'>Something went wrong :(</Alert>\r\n      ) : (\r\n        <ListGroup className='mb-5'>\r\n          {reservations.map((res) => (\r\n            <ListGroup.Item key={res._id}>\r\n              {res.name} for {res.numberOfPeople} on{' '}\r\n              {format(parseISO(res.dateTime), 'EEEE, MMM. do - HH:mm')}\r\n            </ListGroup.Item>\r\n          ))}\r\n        </ListGroup>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Reservations\r\n"]},"metadata":{},"sourceType":"module"}